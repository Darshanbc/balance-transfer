
cp -r fabric-sample/first-network/scripts  ../balance-transfer/artifacts
cp -r fabric-sample/first-network/org3-artifacts  ../balance-transfer/artifacts/
touch balance-transfer/artifacts/docker-compose-cli.yaml 
------------------------------------------docker-compose-cli.yaml starts-------------------------------
version: '2'

services:

  cli:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash -c './scripts/script.sh ${CHANNEL_NAME} ${DELAY} ${LANG}; sleep $TIMEOUT'
    volumes:
        - /var/run/:/host/var/run/
        - ./src/github.com/example_cc/go/:/opt/gopath/src/github.com/chaincode
        - ./channel/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts

------------------------------------------docker-compose-cli.yaml ends-------------------------------

* CHANNEL_NAME=$CHANNEL_NAME TIMEOUT=<pick_a_value> docker-compose -f docker-compose-cli.yaml up -d

export CHANNEL_NAME mychannel

Now we fetch the most recent config block for our channel from the orderer and assign it a name-config block.pb

peer channel fetch config config_block.pb -o orderer.example.com:7050 -c $CHANNEL NAME -tls --cafile $ORDERER CA

And we use the config translator tool to decode this block to JSON

*curl -X POST--data-binary @config.block.pb "$CONFIGTXLATOR_URL/protolator/decode/common.Block" jq . > config_block.json

Now we isolate the current config specific information this removes unnecessary elements from the block (header, channel info,
signatures, etc...)
*jg. >data.data[0].payload.data.config config_block.ison > config.ison

We will then append the org3 specific MSP/config material and write the output to an aptly named file updated config.json
*jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups":{"Org3MSP":.[1]}}}}}' config.json ./channel-artifacts/org3.json >&updated_config.json

So now we have two configuration JSON files- config.json& updated config.json. We need to encode both back to proto format
Original config to proto

*curl -X POST --data-binary @config.json "$CONFIGTXLATOR_URL/protolator/encode/common.Config" > config.pb

Updated config to proto

*curl -X POST --data-binary @config.json "$CONFIGTXLATOR_URL/protolator/encode/common.Config" >  updated_config.pb


Now we will calculate the delta between these two protos this is what we're really after. We'll call it config update.phb

*curl -X POST -F channel=$CHANNEL_NAME -F "original=@config.pb" -F "updated=@updated_config.pb" "${CONFIGTXLATOR_URL}/configtxlator/compute/update-from-configs"> config_update.pb

Parse this proto to JSON - L.e. decode the config update

*curl -X POST --data-binary @config_update.pb "$CONFIGTXLATOR_URL/protolator/decode/common.ConfigUpdate" | jq . > config_update.json


Now wrap it back in the envelope and put the header information back into the JSON

*echo '{"payload":{"header":{"channel_id":"mychannel","type":2}},"data":{"config-update":$(cat
 config_update.json}}}' | jq . > config_update_in_envelope.json

*curl -X POST --data-binary @config_update_in_envelope.json "$CONFIGTXLATOR_URL/protolator/encode/common.Envelope" > config_update_in_envelope.pb

*peer channel signconfigtx -f config_update_in_envelope.pb

*export CORE_PEER_LOCALMSPID="Org2MSP"
*export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
*export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/
*export CORE_PEER_ADDRESS=peer0.org2.example.com:7051


*peer channel update -f config_update_in_envelope.pb -c $CHANNEL_NAME -o orderer.example.com:7050 --tls true --cafile $ORDERER_CA

*docker-compose -f docker-compose-org3.yaml up -d


Hop into the Org3 cli container

*docker exec -it Org3cli bash

First export the CHANNEL NAME variable and path to the Orderer CA TLS Cert

*export ORDERER_CA=/opt/gopath/src/
*export CHANNEL-NAME=mychannel

Now fetch the genesis block for the channel

*peer channel fetch 0 mychannel.block -o orderer.example.com:7050 -c $CHANNEL-NAME- tls--cafile $ORDERER_CA

And join peerO to the channel

*peer channel join -b mychannel.block
